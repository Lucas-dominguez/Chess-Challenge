bestPositions = [0x236306, 0x146416, 0x146426, 0x56426, 0x56426, 0x146426, 0x146416, 0x236306,
                0x24741e, 0x16863e, 0x16866e, 0x6866e, 0x6866e, 0x16866e, 0x16863e, 0x24741e,
                0x245428, 0x166668, 0x17678a, 0x7689c, 0x7689c, 0x17678a, 0x166668, 0x245428,
                0x255427, 0x166777, 0x176798, 0x768ab, 0x768ab, 0x176798, 0x166777, 0x255427,
                0x365426, 0x266666, 0x276896, 0x1768aa, 0x1768aa, 0x276896, 0x266666, 0x355426,
                0x445427, 0x376875, 0x376884, 0x376896, 0x376896, 0x376884, 0x366875, 0x445427,
                0xa45417, 0xa66738, 0x676668, 0x666673, 0x666673, 0x666668, 0xa66738, 0xa45417,
                0xa36306, 0xc46416, 0x846426, 0x657426, 0x657426, 0x846426, 0xc46416, 0xa36306]


bestPositionV2 = [
    0xdc0cf0dc0cf0, 0xea0ae0ea0ae0, 0xea0ad0ea0ad0, 0xf90ad0f90ad0, 0xf90ad0f90ad0, 0xea0ad0ea0ad0, 0xea0ae0ea0ae0, 0xdc0cf0dc0cf0, 
    0xda1ae7da1ae7, 0xe020c7e020c7, 0xe02007e02007, 0xf02007f02007, 0xf02007f02007, 0xe02007e02007, 0xe020c7e020c7, 0xda1ae7da1ae7, 
    0xda9ad2da9ad2, 0xe00002e00002, 0xe10124e10124, 0xf10235f10235, 0xf10235f10235, 0xe10124e10124, 0xe00002e00002, 0xda9ad2da9ad2, 
    0xd99ad1d99ad1, 0xe00111e00111, 0xe10132e10132, 0xf10244f10244, 0xf10244f10244, 0xe10132e10132, 0xe00111e00111, 0xd99ad1d99ad1, 
    0xc09ad0c09ad0, 0xd00000d00000, 0xd10230d10230, 0xe10244e10244, 0xe10244e10244, 0xd10230d10230, 0xd00000d00000, 0xc99ad0c99ad0, 
    0xaa9ad1aa9ad1, 0xc10219c10219, 0xc1022ac1022a, 0xc10230c10230, 0xc10230c10230, 0xc1022ac1022a, 0xc00219c00219, 0xaa9ad1aa9ad1, 
    0x4a9ae14a9ae1, 0x4001c24001c2, 0x010002010002, 0x000001c00001c, 0x00001c00001c, 0x000002000002, 0x4001c24001c2, 0x4a9ae14a9ae1,
    0x4c0cf04c0cf0, 0x5a0ae05a0ae0, 0x2a0ad02a0ad0, 0x0091ad0091ad0, 0x091ad0091ad0, 0x2a0ad02a0ad0, 0x5a0ae05a0ae0, 0x4c0cf04c0cf0]

bestPositionV3 = [
0xfc0cf0dc0cf0, 0xea0ae0ea0ae0, 0xda0ad0ea0ad0, 0xc90ad0f90ad0, 0xc90ad0f90ad0, 0xda0ad0ea0ad0, 0xea0ae0ea0ae0, 0xfc0cf0dc0cf0,
0xda1ae7da1ae7, 0xc020c7e020c7, 0xa02007e02007, 0x2007f02007, 0x2007f02007, 0xa02007e02007, 0xc020c7e020c7, 0xda1ae7da1ae7,
0xda9ad2da9ad2, 0xa00002e00002, 0x410124e10124, 0x510235f10235, 0x510235f10235, 0x410124e10124, 0xa00002e00002, 0xda9ad2da9ad2,
0xd99ad1d99ad1, 0xa00111e00111, 0x510132e10132, 0x610244f10244, 0x610244f10244, 0x510132e10132, 0xa00111e00111, 0xd99ad1d99ad1,
0xd09ad0c09ad0, 0xa00000d00000, 0x510230d10230, 0x610244e10244, 0x610244e10244, 0x510230d10230, 0xa00000d00000, 0xd99ad0c99ad0,
0xda9ad1aa9ad1, 0xa10219c10219, 0x41022ac1022a, 0x510230c10230, 0x510230c10230, 0x41022ac1022a, 0xa00219c00219, 0xda9ad1aa9ad1,
0xda9ae14a9ae1, 0xd001c24001c2, 0x10002010002, 0x1c00001c, 0x1c00001c, 0x2000002, 0xd001c24001c2, 0xda9ae14a9ae1,
0xfc0cf04c0cf0, 0xda0ae05a0ae0, 0xda0ad02a0ad0, 0xd91ad0091ad0, 0xd91ad0091ad0, 0xda0ad02a0ad0, 0xda0ae05a0ae0, 0xfc0cf04c0cf0
]

#positionValues = [-50, -40, -30, -20, -10, -5, 0, 5, 10, 15, 20, 25, 30, 40, 50]
positionValues = [0, 5, 10, 15, 20, 30, 40, 50] 
posByIndex  = {-50:(0x8|7), -40:(0x8 | 6), -30:(0x8 | 5), -20:(0x8 | 4), -15:(0x8|3), -10:(0x8 | 2), -5:(0x8|1), 0:0, 5:1, 10:2, 15:3, 20:4, 30:5, 40:6, 50:7}


def getPST(bestPositions):
    pieceSquareTableMG = []
    pieceSquareTableEG = []
    for i in range(0,6):
        pieceTableMG = []
        pieceTableEG = []
        for j in range(0,64):
            pst = bestPositions[j] >> i*4
            sign = -1 if (pst & 0x8 != 0) else 1
            pstEG = bestPositions[j] >> (6 + i)*4
            signEG = -1 if (pstEG & 0x8 != 0) else 1
            pieceTableMG.append(sign * positionValues[(pst & 0x7)])
            pieceTableEG.append(signEG * positionValues[(pstEG & 0x7)])
        pieceSquareTableMG.append(pieceTableMG)
        pieceSquareTableEG.append(pieceTableEG)
    return pieceSquareTableMG, pieceSquareTableEG


def compressPST(pieceStMidGame, pieceStEndGame):
    res = []
    for i in range(0,64):
        x = 0
        for j in range(0,6):
            #print(pieceSquareTable[j][i] << j*4)
            x |= posByIndex[pieceStMidGame[j][i]] << j*4 
        for j in range(0, 6):
            x |= posByIndex[pieceStEndGame[j][i]] << (j+6)*4
        res.append(x)
    return res


PSTMG = [
[
0, 0, 0, 0, 0, 0, 0, 0,

50, 50, 50, 50, 50, 50, 50, 50,

10, 10, 20, 30, 30, 20, 10, 10,

5, 5, 10, 20, 20, 10, 5, 5,

0, 0, 0, 20, 20, 0, 0, 0,

5, -5, -10, 0, 0, -10, -5, 5,

5, 10, 10, -20, -20, 10, 10, 5,

0, 0, 0, 0, 0, 0, 0, 0
], [


-50, -40, -30, -30, -30, -30, -40, -50,

-40, -20, 0, 0, 0, 0, -20, -40,

-30, 0, 10, 15, 15, 10, 0, -30,

-30, 5, 15, 20, 20, 15, 5, -30,

-30, 0, 15, 20, 20, 15, 0, -30,

-30, 5, 10, 15, 15, 10, 5, -30,

-40, -20, 0, 5, 5, 0, -20, -40,

-50, -40, -30, -30, -30, -30, -40, -50
], [


-20, -10, -10, -10, -10, -10, -10, -20,

-10, 0, 0, 0, 0, 0, 0, -10,

-10, 0, 5, 10, 10, 5, 0, -10,

-10, 5, 5, 10, 10, 5, 5, -10,

-10, 0, 10, 10, 10, 10, 0, -10,

-10, 10, 10, 10, 10, 10, 10, -10,

-10, 5, 0, 0, 0, 0, 5, -10,

-20, -10, -10, -10, -10, -10, -10, -20
], [


0, 0, 0, 0, 0, 0, 0, 0,

5, 10, 10, 10, 10, 10, 10, 5,

-5, 0, 0, 0, 0, 0, 0, -5,

-5, 0, 0, 0, 0, 0, 0, -5,

-5, 0, 0, 0, 0, 0, 0, -5,

-5, 0, 0, 0, 0, 0, 0, -5,

-5, 0, 0, 0, 0, 0, 0, -5,

0, 0, 0, 5, 5, 0, 0, 0
], [


-20, -10, -10, -5, -5, -10, -10, -20,

-10, 0, 0, 0, 0, 0, 0, -10,

-10, 0, 5, 5, 5, 5, 0, -10,

-5, 0, 5, 5, 5, 5, 0, -5,

0, 0, 5, 5, 5, 5, 0, -5,

-10, 5, 5, 5, 5, 5, 0, -10,

-10, 0, 5, 0, 0, 0, 0, -10,

-20, -10, -10, -5, -5, -10, -10, -20
], [


-30, -40, -40, -50, -50, -40, -40, -30,

-30, -40, -40, -50, -50, -40, -40, -30,

-30, -40, -40, -50, -50, -40, -40, -30,

-30, -40, -40, -50, -50, -40, -40, -30,

-20, -30, -30, -40, -40, -30, -30, -20,

-10, -20, -20, -20, -20, -20, -20, -10,

20, 20, 0, 0, 0, 0, 20, 20,

20, 30, 10, 0, 0, 10, 30, 20
]]

PSTEG = [
[
0, 0, 0, 0, 0, 0, 0, 0,

50, 50, 50, 50, 50, 50, 50, 50,

10, 10, 20, 30, 30, 20, 10, 10,

5, 5, 10, 20, 20, 10, 5, 5,

0, 0, 0, 20, 20, 0, 0, 0,

5, -5, -10, 0, 0, -10, -5, 5,

5, 10, 10, -20, -20, 10, 10, 5,

0, 0, 0, 0, 0, 0, 0, 0
], [


-50, -40, -30, -30, -30, -30, -40, -50,

-40, -20, 0, 0, 0, 0, -20, -40,

-30, 0, 10, 15, 15, 10, 0, -30,

-30, 5, 15, 20, 20, 15, 5, -30,

-30, 0, 15, 20, 20, 15, 0, -30,

-30, 5, 10, 15, 15, 10, 5, -30,

-40, -20, 0, 5, 5, 0, -20, -40,

-50, -40, -30, -30, -30, -30, -40, -50
], [


-20, -10, -10, -10, -10, -10, -10, -20,

-10, 0, 0, 0, 0, 0, 0, -10,

-10, 0, 5, 10, 10, 5, 0, -10,

-10, 5, 5, 10, 10, 5, 5, -10,

-10, 0, 10, 10, 10, 10, 0, -10,

-10, 10, 10, 10, 10, 10, 10, -10,

-10, 5, 0, 0, 0, 0, 5, -10,

-20, -10, -10, -10, -10, -10, -10, -20
], [


0, 0, 0, 0, 0, 0, 0, 0,

5, 10, 10, 10, 10, 10, 10, 5,

-5, 0, 0, 0, 0, 0, 0, -5,

-5, 0, 0, 0, 0, 0, 0, -5,

-5, 0, 0, 0, 0, 0, 0, -5,

-5, 0, 0, 0, 0, 0, 0, -5,

-5, 0, 0, 0, 0, 0, 0, -5,

0, 0, 0, 5, 5, 0, 0, 0
], [


-20, -10, -10, -5, -5, -10, -10, -20,

-10, 0, 0, 0, 0, 0, 0, -10,

-10, 0, 5, 5, 5, 5, 0, -10,

-5, 0, 5, 5, 5, 5, 0, -5,

0, 0, 5, 5, 5, 5, 0, -5,

-10, 5, 5, 5, 5, 5, 0, -10,

-10, 0, 5, 0, 0, 0, 0, -10,

-20, -10, -10, -5, -5, -10, -10, -20
], [


-50,-40,-30,-20,-20,-30,-40,-50,
-30,-20,-10,  0,  0,-10,-20,-30,
-30,-10, 20, 30, 30, 20,-10,-30,
-30,-10, 30, 40, 40, 30,-10,-30,
-30,-10, 30, 40, 40, 30,-10,-30,
-30,-10, 20, 30, 30, 20,-10,-30,
-30,-30,  0,  0,  0,  0,-30,-30,
-50,-30,-30,-30,-30,-30,-30,-50
]]


def printList(l, hexPrint=True):
    print("[")
    for i in range(len(l)) : 
        if(hexPrint):
            print(hex(l[i]), end=", " if i%8!=7 else ", \n")
        else:
            print(l[i], end=", " if i%8!=7 else ", \n")
    print("]")


FullPositionValues = [-50,-40,-30,-20,-15,-10,-5, 0, 5, 10, 15, 20, 30, 40, 50] 


pestoOriginalPST_MG = [[
      0,   0,   0,   0,   0,   0,  0,   0,
     98, 134,  61,  95,  68, 126, 34, -11,
     -6,   7,  26,  31,  65,  56, 25, -20,
    -14,  13,   6,  21,  23,  12, 17, -23,
    -27,  -2,  -5,  12,  17,   6, 10, -25,
    -26,  -4,  -4, -10,   3,   3, 33, -12,
    -35,  -1, -20, -23, -15,  24, 38, -22,
      0,   0,   0,   0,   0,   0,  0,   0],

    [-167, -89, -34, -49,  61, -97, -15, -107,
     -73, -41,  72,  36,  23,  62,   7,  -17,
     -47,  60,  37,  65,  84, 129,  73,   44,
      -9,  17,  19,  53,  37,  69,  18,   22,
     -13,   4,  16,  13,  28,  19,  21,   -8,
     -23,  -9,  12,  10,  19,  17,  25,  -16,
     -29, -53, -12,  -3,  -1,  18, -14,  -19,
    -105, -21, -58, -33, -17, -28, -19,  -23],

    [-29,   4, -82, -37, -25, -42,   7,  -8,
    -26,  16, -18, -13,  30,  59,  18, -47,
    -16,  37,  43,  40,  35,  50,  37,  -2,
     -4,   5,  19,  50,  37,  37,   7,  -2,
     -6,  13,  13,  26,  34,  12,  10,   4,
      0,  15,  15,  15,  14,  27,  18,  10,
      4,  15,  16,   0,   7,  21,  33,   1,
    -33,  -3, -14, -21, -13, -12, -39, -21],
    
     [32,  42,  32,  51, 63,  9,  31,  43,
     27,  32,  58,  62, 80, 67,  26,  44,
     -5,  19,  26,  36, 17, 45,  61,  16,
    -24, -11,   7,  26, 24, 35,  -8, -20,
    -36, -26, -12,  -1,  9, -7,   6, -23,
    -45, -25, -16, -17,  3,  0,  -5, -33,
    -44, -16, -20,  -9, -1, 11,  -6, -71,
    -19, -13,   1,  17, 16,  7, -37, -26], 

    [-28,   0,  29,  12,  59,  44,  43,  45,
    -24, -39,  -5,   1, -16,  57,  28,  54,
    -13, -17,   7,   8,  29,  56,  47,  57,
    -27, -27, -16, -16,  -1,  17,  -2,   1,
     -9, -26,  -9, -10,  -2,  -4,   3,  -3,
    -14,   2, -11,  -2,  -5,   2,  14,   5,
    -35,  -8,  11,   2,   8,  15,  -3,   1,
     -1, -18,  -9,  10, -15, -25, -31, -50],


    [-65,  23,  16, -15, -56, -34,   2,  13,
     29,  -1, -20,  -7,  -8,  -4, -38, -29,
     -9,  24,   2, -16, -20,   6,  22, -22,
    -17, -20, -12, -27, -30, -25, -14, -36,
    -49,  -1, -27, -39, -46, -44, -33, -51,
    -14, -14, -22, -46, -44, -30, -15, -27,
      1,   7,  -8, -64, -43, -16,   9,   8,
    -15,  36,  12, -54,   8, -28,  24,  14]
]



pestoOriginalPST_EG = [[
      0,   0,   0,   0,   0,   0,   0,   0,
    178, 173, 158, 134, 147, 132, 165, 187,
     94, 100,  85,  67,  56,  53,  82,  84,
     32,  24,  13,   5,  -2,   4,  17,  17,
     13,   9,  -3,  -7,  -7,  -8,   3,  -1,
      4,   7,  -6,   1,   0,  -5,  -1,  -8,
     13,   8,   8,  10,  13,   0,   2,  -7,
      0,   0,   0,   0,   0,   0,   0,   0],

    [-58, -38, -13, -28, -31, -27, -63, -99,
    -25,  -8, -25,  -2,  -9, -25, -24, -52,
    -24, -20,  10,   9,  -1,  -9, -19, -41,
    -17,   3,  22,  22,  22,  11,   8, -18,
    -18,  -6,  16,  25,  16,  17,   4, -18,
    -23,  -3,  -1,  15,  10,  -3, -20, -22,
    -42, -20, -10,  -5,  -2, -20, -23, -44,
    -29, -51, -23, -15, -22, -18, -50, -64],

    [-14, -21, -11,  -8, -7,  -9, -17, -24,
     -8,  -4,   7, -12, -3, -13,  -4, -14,
      2,  -8,   0,  -1, -2,   6,   0,   4,
     -3,   9,  12,   9, 14,  10,   3,   2,
     -6,   3,  13,  19,  7,  10,  -3,  -9,
    -12,  -3,   8,  10, 13,   3,  -7, -15,
    -14, -18,  -7,  -1,  4,  -9, -15, -27,
    -23,  -9, -23,  -5, -9, -16,  -5, -17],

    [13, 10, 18, 15, 12,  12,   8,   5,
    11, 13, 13, 11, -3,   3,   8,   3,
     7,  7,  7,  5,  4,  -3,  -5,  -3,
     4,  3, 13,  1,  2,   1,  -1,   2,
     3,  5,  8,  4, -5,  -6,  -8, -11,
    -4,  0, -5, -1, -7, -12,  -8, -16,
    -6, -6,  0,  2, -9,  -9, -11,  -3,
    -9,  2,  3, -1, -5, -13,   4, -20],

     [-9,  22,  22,  27,  27,  19,  10,  20,
    -17,  20,  32,  41,  58,  25,  30,   0,
    -20,   6,   9,  49,  47,  35,  19,   9,
      3,  22,  24,  45,  57,  40,  57,  36,
    -18,  28,  19,  47,  31,  34,  39,  23,
    -16, -27,  15,   6,   9,  17,  10,   5,
    -22, -23, -30, -16, -16, -23, -36, -32,
    -33, -28, -22, -43,  -5, -32, -20, -41],

    [-74, -35, -18, -18, -11,  15,   4, -17,
    -12,  17,  14,  17,  17,  38,  23,  11,
     10,  17,  23,  15,  20,  45,  44,  13,
     -8,  22,  24,  27,  26,  33,  26,   3,
    -18,  -4,  21,  24,  27,  23,   9, -11,
    -19,  -3,  11,  21,  23,  16,   7,  -9,
    -27, -11,   4,  13,  14,   4,  -5, -17,
    -53, -34, -21, -11, -28, -14, -24, -43]
]

pestoNew_MG = []
for i in pestoOriginalPST_MG : 
    x = []
    for j in i:
        x.append(min(FullPositionValues, key=lambda x:abs(x-j)))
    pestoNew_MG.append(x)

pestoNew_EG = []
for i in pestoOriginalPST_EG : 
    x = []
    for j in i:
        x.append(min(FullPositionValues, key=lambda x:abs(x-j)))
    pestoNew_EG.append(x)
"""
print("pestoNew_MG = [")
for i in pestoNew_MG:
    printList(i, False)
    print(", ")
print("]")


print("pestoNew_EG = [")
for i in pestoNew_EG:
    printList(i, False)
    print(", ")
print("]")
"""

pestoNew_MG = [
[
0, 0, 0, 0, 0, 0, 0, 0,
50, 50, 50, 50, 50, 50, 30, -10,
-5, 5, 30, 30, 50, 50, 20, -20,
-15, 15, 5, 20, 20, 10, 15, -20,
-30, 0, -5, 10, 15, 5, 10, -30,
-30, -5, -5, -10, 5, 5, 30, -10,
-40, 0, -20, -20, -15, 20, 40, -20,
0, 0, 0, 0, 0, 0, 0, 0,
]
,
[
-50, -50, -30, -50, 50, -50, -15, -50,
-50, -40, 50, 40, 20, 50, 5, -15,
-50, 50, 40, 50, 50, 50, 50, 40,
-10, 15, 20, 50, 40, 50, 20, 20,
-15, 5, 15, 15, 30, 20, 20, -10,
-20, -10, 10, 10, 20, 15, 20, -15,
-30, -50, -10, -5, 0, 20, -15, -20,
-50, -20, -50, -30, -15, -30, -20, -20,
]
,
[
-30, 5, -50, -40, -30, -40, 5, -10,
-30, 15, -20, -15, 30, 50, 20, -50,
-15, 40, 40, 40, 30, 50, 40, 0,
-5, 5, 20, 50, 40, 40, 5, 0,
-5, 15, 15, 30, 30, 10, 10, 5,
0, 15, 15, 15, 15, 30, 20, 10,
5, 15, 15, 0, 5, 20, 30, 0,
-30, -5, -15, -20, -15, -10, -40, -20,
]
,
[
30, 40, 30, 50, 50, 10, 30, 40,
30, 30, 50, 50, 50, 50, 30, 40,
-5, 20, 30, 40, 15, 40, 50, 15,
-20, -10, 5, 30, 20, 30, -10, -20,
-40, -30, -10, 0, 10, -5, 5, -20,
-50, -30, -15, -15, 5, 0, -5, -30,
-40, -15, -20, -10, 0, 10, -5, -50,
-20, -15, 0, 15, 15, 5, -40, -30,
]
,
[
-30, 0, 30, 10, 50, 40, 40, 40,
-20, -40, -5, 0, -15, 50, 30, 50,
-15, -15, 5, 10, 30, 50, 50, 50,
-30, -30, -15, -15, 0, 15, 0, 0,
-10, -30, -10, -10, 0, -5, 5, -5,
-15, 0, -10, 0, -5, 0, 15, 5,
-40, -10, 10, 0, 10, 15, -5, 0,
0, -20, -10, 10, -15, -30, -30, -50,
]
,
[
-50, 20, 15, -15, -50, -30, 0, 15,
30, 0, -20, -5, -10, -5, -40, -30,
-10, 20, 0, -15, -20, 5, 20, -20,
-15, -20, -10, -30, -30, -30, -15, -40,
-50, 0, -30, -40, -50, -40, -30, -50,
-15, -15, -20, -50, -40, -30, -15, -30,
0, 5, -10, -50, -40, -15, 10, 10,
-15, 40, 10, -50, 10, -30, 20, 15,
]
]
pestoNew_EG = [
[
0, 0, 0, 0, 0, 0, 0, 0,
50, 50, 50, 50, 50, 50, 50, 50,
50, 50, 50, 50, 50, 50, 50, 50,
30, 20, 15, 5, 0, 5, 15, 15,
15, 10, -5, -5, -5, -10, 5, 0,
5, 5, -5, 0, 0, -5, 0, -10,
15, 10, 10, 10, 15, 0, 0, -5,
0, 0, 0, 0, 0, 0, 0, 0,
]
,
[
-50, -40, -15, -30, -30, -30, -50, -50,
-30, -10, -30, 0, -10, -30, -20, -50,
-20, -20, 10, 10, 0, -10, -20, -40,
-15, 5, 20, 20, 20, 10, 10, -20,
-20, -5, 15, 20, 15, 15, 5, -20,
-20, -5, 0, 15, 10, -5, -20, -20,
-40, -20, -10, -5, 0, -20, -20, -40,
-30, -50, -20, -15, -20, -20, -50, -50,
]
,
[
-15, -20, -10, -10, -5, -10, -15, -20,
-10, -5, 5, -10, -5, -15, -5, -15,
0, -10, 0, 0, 0, 5, 0, 5,
-5, 10, 10, 10, 15, 10, 5, 0,
-5, 5, 15, 20, 5, 10, -5, -10,
-10, -5, 10, 10, 15, 5, -5, -15,
-15, -20, -5, 0, 5, -10, -15, -30,
-20, -10, -20, -5, -10, -15, -5, -15,
]
,
[
15, 10, 20, 15, 10, 10, 10, 5,
10, 15, 15, 10, -5, 5, 10, 5,
5, 5, 5, 5, 5, -5, -5, -5,
5, 5, 15, 0, 0, 0, 0, 0,
5, 5, 10, 5, -5, -5, -10, -10,
-5, 0, -5, 0, -5, -10, -10, -15,
-5, -5, 0, 0, -10, -10, -10, -5,
-10, 0, 5, 0, -5, -15, 5, -20,
]
,
[
-10, 20, 20, 30, 30, 20, 10, 20,
-15, 20, 30, 40, 50, 20, 30, 0,
-20, 5, 10, 50, 50, 30, 20, 10,
5, 20, 20, 40, 50, 40, 50, 40,
-20, 30, 20, 50, 30, 30, 40, 20,
-15, -30, 15, 5, 10, 15, 10, 5,
-20, -20, -30, -15, -15, -20, -40, -30,
-30, -30, -20, -40, -5, -30, -20, -40,
]
,
[
-50, -40, -20, -20, -10, 15, 5, -15,
-10, 15, 15, 15, 15, 40, 20, 10,
10, 15, 20, 15, 20, 40, 40, 15,
-10, 20, 20, 30, 30, 30, 30, 5,
-20, -5, 20, 20, 30, 20, 10, -10,
-20, -5, 10, 20, 20, 15, 5, -10,
-30, -10, 5, 15, 15, 5, -5, -15,
-50, -30, -20, -10, -30, -15, -20, -40,
]
]


res = compressPST(PSTMG, pestoNew_EG)
printList(res)
pieceSTMG, pieceStEG = getPST(res)

if PSTMG == pieceSTMG and pestoNew_EG == pieceStEG:
    print("TEST OK")
else:
    print("ERROR")
    print(pieceSTMG)
    print(pieceStEG)

bestPostionPestoCompressed = [
0xfa3bf0fd5df0, 0xe42ce04061f0, 0xc44ab0355fd0, 0xc53ad0b27ef0, 0xa529d0f77d70, 0x342ad0d62ef0, 0x122bf00651b0, 0xb41cf0366af0,
0xab2ad75c5df7, 0x3439a70e53e7, 0x3531d7c97c77, 0x362a07907b67, 0x3799a7ab7547, 0x641bd7977777, 0x4529c7e55415, 0x201bf7d76fba,
0x2c10c7ab9bf9, 0x311ac74b4671, 0x421027015665, 0x371027b26675, 0x471007c53577, 0x6591a7176777, 0x6490c7477674, 0x3291e7c7306c,
0xa119b5bdc9ab, 0x441214cda133, 0x443243ab1441, 0x560241db5774, 0x570340d04664, 0x560221d35672, 0x570123b0a143, 0x1600c3e0c04c,
0xcc19c3fae9bd, 0x9511920dd310, 0x442339daa339, 0x471449ea0532, 0x559139f02553, 0x45923ae99241, 0x26a911d11242, 0xa4aac0f9c1ad,
0xcb9ac1bbf0cd, 0x9d0991b0d3a9, 0x239209cab329, 0x410230f0b32a, 0x429320e91341, 0x33a199d00531, 0x12a9c0b39445, 0xa1bbcad1d2ba,
0xdc9be30ee1de, 0xac9cc21ab3f0, 0x1d09a2a2c3ac, 0x3b0092f0a09c, 0x3ba103e2010b, 0x1caac0b32444, 0x9eabc02995b6, 0xbd9de920f0cc,
0xfdacd0b0cdf0, 0xdd0af06cb9c0, 0xcc1cc02a0bf0, 0xae09b0f23cd0, 0xd99ac02b3bb0, 0xbdbbc0dd1ad0, 0xcc19f04deec0, 0xeecbf03fdcc0,
]


bestPosMixed = [
0xfa3bf0dc0cf0, 0xe42ce0ea0ae0, 0xc44ab0ea0ad0, 0xc53ad0f90ad0, 0xa529d0f90ad0, 0x342ad0ea0ad0, 0x122bf0ea0ae0, 0xb41cf0dc0cf0,
0xab2ad7da1ae7, 0x3439a7e020c7, 0x3531d7e02007, 0x362a07f02007, 0x3799a7f02007, 0x641bd7e02007, 0x4529c7e020c7, 0x201bf7da1ae7,
0x2c10c7da9ad2, 0x311ac7e00002, 0x421027e10124, 0x371027f10235, 0x471007f10235, 0x6591a7e10124, 0x6490c7e00002, 0x3291e7da9ad2,
0xa119b5d99ad1, 0x441214e00111, 0x443243e10132, 0x560241f10244, 0x570340f10244, 0x560221e10132, 0x570123e00111, 0x1600c3d99ad1,
0xcc19c3c09ad0, 0x951192d00000, 0x442339d10230, 0x471449e10244, 0x559139e10244, 0x45923ad10230, 0x26a911d00000, 0xa4aac0c99ad0,
0xcb9ac1aa9ad1, 0x9d0991c10219, 0x239209c1022a, 0x410230c10230, 0x429320c10230, 0x33a199c1022a, 0x12a9c0c00219, 0xa1bbcaaa9ad1,
0xdc9be34a9ae1, 0xac9cc24001c2, 0x1d09a2010002, 0x3b009200001c, 0x3ba10300001c, 0x1caac0000002, 0x9eabc04001c2, 0xbd9de94a9ae1,
0xfdacd04c0cf0, 0xdd0af05a0ae0, 0xcc1cc02a0ad0, 0xae09b0091ad0, 0xd99ac0091ad0, 0xbdbbc02a0ad0, 0xcc19f05a0ae0, 0xeecbf04c0cf0,
]